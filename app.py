import streamlit as st
import pandas as pd
from pathlib import Path
import plotly.express as px

from analiz import (
    load_data,
    validate_data,
    generate_report_final,
    find_unique_and_duplicates_weighted,
    create_detailed_statistics_enhanced
)

# –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
PROCESS_DIR = Path("process_data")
OUTPUT_PATH = Path("–æ—Ç—á–µ—Ç_–æ–±—Ä–∞—â–µ–Ω–∏–π_—Ñ–∏–Ω–∞–ª.xlsx")
PROCESS_DIR.mkdir(exist_ok=True)

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π", layout="wide")

st.title("üìä –í–µ–±-—Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª, –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Å–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx", "xls"])

if uploaded_file is not None:
    input_path = PROCESS_DIR / uploaded_file.name
    with open(input_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    st.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {input_path}")

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    df = load_data(str(input_path))
    if df is not None:
        st.subheader("üìë –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head(20))

        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
            try:
                # --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
                df_valid, column_mapping = validate_data(df)

                # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---
                unique_df, duplicates_detailed, work_df = find_unique_and_duplicates_weighted(df_valid, column_mapping)

                # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel –æ—Ç—á—ë—Ç–∞ ---
                generate_report_final(df_valid, unique_df, duplicates_detailed, work_df, column_mapping)

                # --- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
                total = len(df_valid)
                uniq = len(unique_df)
                dups = len(duplicates_detailed)
                st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π", total)
                col2.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", uniq)
                col3.metric("–î—É–±–ª–∏–∫–∞—Ç–æ–≤", dups)
                col4.metric("–î–æ–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", f"{dups / total * 100:.1f}%" if total else "0%")

                # --- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
                stats_df = create_detailed_statistics_enhanced(df_valid, unique_df, duplicates_detailed, work_df)
                if not stats_df.empty:
                    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    st.dataframe(stats_df)

                # --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
                st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")

                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
                if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è" in work_df.columns:
                    fig = px.pie(
                        work_df,
                        names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
                    )
                    st.plotly_chart(fig, use_container_width=True)

                # –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
                if "–ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤" in work_df.columns:
                    dup_groups = work_df[work_df["–ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"] != ""].groupby("–ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤").size()
                    if not dup_groups.empty:
                        fig = px.histogram(
                            dup_groups,
                            nbins=20,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
                        )
                        st.plotly_chart(fig, use_container_width=True)

                # –ü–æ –º–µ—Å—è—Ü–∞–º
                date_col = next((c for c in df_valid.columns if "–¥–∞—Ç–∞" in c.lower()), None)
                if date_col:
                    df_valid[date_col] = pd.to_datetime(df_valid[date_col], errors="coerce")
                    monthly = df_valid[df_valid[date_col].notna()][date_col].dt.to_period("M").value_counts().sort_index()
                    if not monthly.empty:
                        fig = px.bar(
                            monthly,
                            x=monthly.index.astype(str),
                            y=monthly.values,
                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º"
                        )
                        st.plotly_chart(fig, use_container_width=True)

                # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ---
                if OUTPUT_PATH.exists():
                    with open(OUTPUT_PATH, "rb") as f:
                        st.download_button(
                            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç (Excel)",
                            data=f,
                            file_name=OUTPUT_PATH.name,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
